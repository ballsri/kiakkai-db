# add resident ref to vehicle
#################################################
db.residents.find({vehicle_ref: {$exists:true}}).forEach(function(doc) {
	db.vehicles.updateMany({driver: doc.prefix+doc.name+ " "+ doc.lastname}, {
			$set:{
				resident_ref: doc._id
			}
		}
	)
})

# add vehicle ref array to resident
#################################################
db.residents.find().forEach(function(doc) {
  var vehicles = db.vehicles.find({
    driver: doc.prefix + doc.name + " " + doc.lastname
  }).toArray();
  
  var vehicleIds = vehicles.map(function(vehicle) {
    return vehicle._id;
  });
  if(vehicleIds.length > 0){
  	db.residents.updateOne({ _id: doc._id },
    		{ $set: { vehicle_ref: vehicleIds } }
	  );
  }
});

# add electric meter ref to resident
#################################################
db.residents.find({'is_owner':true}).forEach(function(doc) {
   var raddr = doc.address;
   var refaddr = db.e_meters.findOne({address: raddr});
   db.residents.updateOne({_id: doc._id},{
      $set: {
         e_meter_ref:refaddr._id
      }
   })
});

# add resident ref to electric meter
#################################################
db.e_meters.find().forEach(function(doc){
	var res = db.residents.findOne({address:doc.address, is_owner:true});
	if(res){
		db.e_meters.updateOne({_id:doc._id},{
			$set: {
				resident_ref:res._id
			}
		})
	}
})

# drop unneccessary fields from vehicle
#################################################
#db.vehicles.updateMany({}, 
#   {$unset: {
#	address: "",
#	driver: "",
#	phone: ""
#      }
#   }
#);

# convert false building to real building
#################################################
db.residents.find().forEach(function(doc) {
	var b = doc.building
	if(b == "4-Feb"){
		b = "4/2";
	} else if (b == "4-Mar") {
		b = "4/3"
	} else if (b == "4-Apr"){
		b = "4/4"
	} else {
		b = "4/5"
	}
	db.residents.updateOne({_id:doc._id},{
		$set:{
			building: b
		}
	})
})

# add room ref to resident
#################################################
db.rooms.find().forEach(function(doc){
	var bd = doc.building_address;
	var addr = doc.address;
	
	var res = db.residents.find({building: bd, address: addr});
	
	var resIds = res.map(function(r){
		return r._id;
	})
	
	db.residents.updateMany({building:bd, address:addr},{
		$set:{
			room_ref:doc._id
		}
	})
});

# drop unneccery field from resident
################################################
db.residents.updateMany({},{
	$unset:{
		building:"",
		address:""
	}
})

# drop unneccery field from electric_meter
###############################################
db.e_meters.updateMany({},{
	$unset:{
		address:""
		
	}
})

# create data logging
###############################################
db.collectionName.updateMany({}, {
$set: {
		"created_by": "system",
		"created_at": new Date("0001-01-01T00:00:00.000Z"),
		"updated_by": null,
		"updated_at": null,
		"removed_by": null,
		"removed_at": null,
	}
})

# create join date for every residents
###############################################
db.residents.updateMany({}, {
$set: {
		"join_at": new Date("0001-01-01T00:00:00.000Z"),
		"leave_at": null,
		
	}
})

# add building ref to room
###############################################
db.buildings.find({}).forEach(function(doc) {
	var name = doc.name;
	db.rooms.updateMany({building_address:name},{
		$set:{
			building_ref:doc._id
		},
		$unset:{
			building_address:"",
		}
	})
})